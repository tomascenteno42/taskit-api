version: 2
jobs:
  test:
    working_directory: ~/repo
    docker:
      - image: teovillanueva/node-postgres:0.0.3
        environment:
          DATABASE_URL: postgres://root:toor@localhost:5432/taskit # This is the URL that will be used by prisma
          JWT_SECRET: testest
    steps:
      - run:
          name: Setup PostgreSQL
          command: |
            chmod -R 777 ~
            /etc/init.d/postgresql start
            sudo -u postgres sh -c 'createuser root'
            sudo -u postgres psql -c "CREATE DATABASE taskit;"
            sudo -u postgres psql -c "ALTER USER root CREATEDB"
            sudo -u postgres psql -c "ALTER USER root PASSWORD 'toor';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE taskit TO root;"
            sudo -u postgres psql -c "GRANT CONNECT ON DATABASE taskit TO root;"
            sudo -u postgres psql -c "CREATE SCHEMA IF NOT EXISTS public AUTHORIZATION root;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO root;"

      # Checkout the code
      - checkout

      # Resote cache
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
    
      # Install dependencies
      - run: npm install

      # save cache
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules

      # Run migrations on test database
      - run: npx prisma migrate up --experimental

      # run tests
      - run: npm test

  deploy:
    working_directory: ~/repo
    docker:
      - image: nikolaik/python-nodejs

    steps:
      - checkout

      - run:
          name: Install awscli
          command: |
            pip install awsebcli --upgrade
      
      - run: 
          name: Install zip
          command: |
            apt-get update
            apt-get install zip
      
      - run:
          name: Create AWS credentials
          command: |
            mkdir ~/.aws
            touch ~/.aws/config
            chmod 600 ~/.aws/config
            echo "[profile eb-cli]" > ~/.aws/config
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config
            echo "export DATABASE_URL=$PRODUCTION_DATABASE_URL" >> $BASH_ENV
            source $BASH_ENV

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Deploy to EB
          command: npm run ci:deploy

      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master